#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "YETI Manual"
\pdf_author "Michael Furmur"
\pdf_keywords "yeti,core,user manual"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue, urlcolor=blue, citecolor=blue"
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
YETI SBC Manual
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
What is YETI SBC ?
\end_layout

\begin_layout Standard
YETI SBC is project based on sbc module of 
\begin_inset CommandInset href
LatexCommand href
name "SEMS"
target "http://www.iptel.org/sems"

\end_inset

 project.
 The main goal is to provide ability to control routing logic and entire
 softwitch behaviour from database.
 This approach provides flexibility, ability to quickly add a non-trivial
 features and simple integraton with other systems.
 It is possible to completely change the business logic without having to
 change any code except of database stored procedures.
\end_layout

\begin_layout Standard
Project consist of few separate parts:
\end_layout

\begin_layout Itemize

\series bold
Core
\series default

\begin_inset Newline newline
\end_inset

modified SEMS and our module binaries
\end_layout

\begin_layout Itemize

\series bold
Database
\series default

\begin_inset Newline newline
\end_inset

set of tables and appropriate PL/pgSQL stored procedures.
 As a database system we have chosen 
\begin_inset CommandInset href
LatexCommand href
name "PostgreSQL"
target "http://www.postgresql.org/"

\end_inset

.
 
\end_layout

\begin_layout Itemize

\series bold
Web
\series default

\begin_inset Newline newline
\end_inset

web-interface written in 
\begin_inset CommandInset href
LatexCommand href
name "Active Admin"
target "http://www.activeadmin.info/"

\end_inset


\end_layout

\begin_layout Standard
All parts may be located at the same physical server or on separate servers
 to increase performance.
\end_layout

\begin_layout Standard
We recommends using of Debian GNU/Linux 7 as operating system for all software
 parts but you can use any Linux which satisfy to the following conditions:
\end_layout

\begin_layout Itemize
Core: 
\end_layout

\begin_layout Itemize
Database:
\end_layout

\begin_layout Itemize
Web: 
\end_layout

\begin_layout Standard
YETI SBC is distributed under GPL license and we can provide source code
 of any part on demand
\end_layout

\begin_layout Subsection
Features
\end_layout

\begin_layout Standard
Basic set of features is based on current SEMS implementation so it would
 be reasonable to first familiarize yourself with documentation for SEMS
 SBC.
 We often commit merges with master branch of SEMS.
\end_layout

\begin_layout Standard
YETI SBC is optimized for routing of transit traffic.
\end_layout

\begin_layout Itemize
Very detailed CDRs, possibility to configure custom variables from database
\end_layout

\begin_layout Itemize
Well thought out web-interface
\end_layout

\begin_layout Itemize
Useful xmlrpc interface for control and monitoring
\end_layout

\begin_layout Itemize
Current database part implementation supports LCR/ASR/ACD routing.
 And we are still adding new features to control routing (trying to do this
 without sacrificing performance)
\end_layout

\begin_layout Section
Quick start
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Subsection
Installation
\end_layout

\begin_layout Subsubsection
Database
\end_layout

\begin_layout Subsubsection
Web-interface
\end_layout

\begin_layout Subsubsection
Core
\end_layout

\begin_layout Subsection
Configuration
\end_layout

\begin_layout Subsubsection
Database
\end_layout

\begin_layout Subsubsection
Web-interface
\end_layout

\begin_layout Standard
see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Web-Quick-start"

\end_inset


\end_layout

\begin_layout Subsubsection
Core
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Subsection
Common architecture
\end_layout

\begin_layout Subsection
Interaction of the parts
\end_layout

\begin_layout Section
Configuration
\end_layout

\begin_layout Subsection
Database
\end_layout

\begin_layout Subsection
Web-interface
\end_layout

\begin_layout Subsection
Core
\end_layout

\begin_layout Standard
Currently all parameters specific to YETI module are presented in yeti.conf
 (default location: /etc/sems/etc/yeti.conf )
\end_layout

\begin_layout Standard
Keep in mind that there are many parameters which loaded from database during
 application startup
\end_layout

\begin_layout Subsubsection
Common
\end_layout

\begin_layout Paragraph
node_id (integer,id)
\begin_inset CommandInset label
LatexCommand label
name "par:node_id-(integer,id)"

\end_inset


\end_layout

\begin_layout Standard
each application instance has it own node_id to distinguish from each other
 in the database.
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameter
\end_layout

\begin_layout Paragraph
pop_id (integer,id)
\begin_inset CommandInset label
LatexCommand label
name "par:pop_id-(integer,id)"

\end_inset


\end_layout

\begin_layout Standard
point of presence id.
 used to group nodes with certain propeties (eg.
 geographical location).
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameter
\end_layout

\begin_layout Paragraph
msg_logger_dir (string,path)
\end_layout

\begin_layout Standard
path to the directory where will be written calls pcap dumps
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameter
\end_layout

\begin_layout Paragraph
calls_show_limit (integer) 
\begin_inset CommandInset label
LatexCommand label
name "par:calls_show_limit-(integer)"

\end_inset


\end_layout

\begin_layout Standard
upper limit for getCalls [
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getCalls"

\end_inset

] xmlrpc request 
\end_layout

\begin_layout Subsubsection
Registrations
\end_layout

\begin_layout Paragraph
reg_check_interval(integer, milliseconds)
\end_layout

\begin_layout Standard
SIP registration client works as separate thread.
 List of required registrations is loaded from database.
 This parameter determines interval between checks for configured registration
 entries state in milliseconds.
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 5000
\end_layout

\begin_layout Subsubsection
Routing database
\end_layout

\begin_layout Paragraph
db_schema(string)
\end_layout

\begin_layout Standard
database scheme.
 used during routing and loading of configuration of resources control and
 codes translations
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameter
\end_layout

\begin_layout Paragraph
getprofile_function(string)
\end_layout

\begin_layout Standard
SQL query to get callprofiles defined as db_schema.get_profile_function(...)
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameter
\end_layout

\begin_layout Paragraph
master_host, port,user,name,pass
\begin_inset CommandInset label
LatexCommand label
name "par:master_host,port,user,name,pass"

\end_inset


\end_layout

\begin_layout Standard
parameters is the same as 
\begin_inset CommandInset href
LatexCommand href
name "libpq connection string params"
target "http://www.postgresql.org/docs/devel/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS"

\end_inset


\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory parameters
\end_layout

\begin_layout Paragraph
master_pool_size(integer)
\begin_inset CommandInset label
LatexCommand label
name "par:master_pool_size(integer)"

\end_inset


\end_layout

\begin_layout Standard
database connections pool size
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 10
\end_layout

\begin_layout Paragraph
master_check_interval(integer,seconds)
\begin_inset CommandInset label
LatexCommand label
name "par:master_check_interval(integer,se"

\end_inset


\end_layout

\begin_layout Standard
interval between database connection checks in case when no active load.
 
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 25
\end_layout

\begin_layout Paragraph
master_max_exceptions(integer)
\begin_inset CommandInset label
LatexCommand label
name "par:master_max_exceptions(integer)"

\end_inset


\end_layout

\begin_layout Standard
the number of non-critical connection exceptions after which consider it
 a bad.
\end_layout

\begin_layout Standard
zero means infinity
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 0
\end_layout

\begin_layout Paragraph
master_max_wait(integer,milliseconds)
\begin_inset CommandInset label
LatexCommand label
name "par:master_max_wait(integer,millisec"

\end_inset


\end_layout

\begin_layout Standard
timeout of connection obtaining from connections pool in milliseconds
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 125
\end_layout

\begin_layout Paragraph
failover_to_slave(boolean)
\end_layout

\begin_layout Standard
enable using slave database for failover
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 0
\end_layout

\begin_layout Paragraph
slave_host,port,user,name,pass
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_host,port,user,name,pass"

\end_inset


\end_layout

\begin_layout Paragraph
slave_pool_size(integer)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_pool_size(integer)"

\end_inset


\end_layout

\begin_layout Paragraph
slave_check_interval(integer,milliseconds)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_check_interval(integer,se"

\end_inset


\end_layout

\begin_layout Paragraph
slave_max_exceptions(integer)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_max_exceptions(integer)"

\end_inset


\end_layout

\begin_layout Paragraph
slave_max_wait(integer,milliseconds)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_max_wait(integer,millisec"

\end_inset


\end_layout

\begin_layout Subsubsection
Profiles cache
\end_layout

\begin_layout Paragraph
profiles_cache_enabled(boolean)
\end_layout

\begin_layout Standard
enable using of callprofiles local cache
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 0
\end_layout

\begin_layout Paragraph
profiles_cache_check_interval(integer,seconds)
\end_layout

\begin_layout Standard
interval between checks for obsolete profiles in seconds (also check is
 made before returning of found entry) 
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 30
\end_layout

\begin_layout Paragraph
profiles_cache_buckets(integer)
\end_layout

\begin_layout Standard
number of buckets in callprofiles local cache hash
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 65000
\end_layout

\begin_layout Subsubsection
CDRs
\end_layout

\begin_layout Paragraph
cdr_check_interval(integer,milliseconds)
\end_layout

\begin_layout Standard
interval between database connection checks in milliseconds
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 5000
\end_layout

\begin_layout Paragraph
mastercdr_host,port,name,user,pass
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_host,port,user,name,pass"

\end_inset


\end_layout

\begin_layout Paragraph
slavecdr_host,port,name,user,pass
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:master_host,port,user,name,pass"

\end_inset


\end_layout

\begin_layout Paragraph
writecdr_schema(string)
\end_layout

\begin_layout Standard
schema used during CDR write
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
writecdr_function(string)
\end_layout

\begin_layout Standard
SQL query is writecdr_schema.writecdr_function(...)
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
failover_to_file(boolean)
\end_layout

\begin_layout Standard
enable using slave database for failover
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 1
\end_layout

\begin_layout Paragraph
cdr_dir(string)
\end_layout

\begin_layout Standard
full path for temporary csv files with CDRs
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory if failover_to_file
\end_layout

\begin_layout Paragraph
cdr_completed_dir(string)
\end_layout

\begin_layout Standard
full path for completed csv files with CDRs
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory if failover_to_file
\end_layout

\begin_layout Subsubsection
Resource control
\end_layout

\begin_layout Paragraph
write_redis_host,port
\end_layout

\begin_layout Standard
redis connection settings
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 127.0.0.1:6739
\end_layout

\begin_layout Paragraph
write_redis_size(integer)
\end_layout

\begin_layout Standard
redis pool size
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
write_redis_timeout(integer,seconds)
\end_layout

\begin_layout Standard
TTL for resource entry in seconds
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
read_redis_host,port
\end_layout

\begin_layout Standard
redis connection settings
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 127.0.0.1:6739
\end_layout

\begin_layout Paragraph
read_redis_size(integer)
\end_layout

\begin_layout Standard
redis pool size
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
read_redis_timeout(integer,seconds)
\end_layout

\begin_layout Standard
TTL for resource entry in seconds
\end_layout

\begin_layout Standard

\series bold
default
\series default
: mandatory
\end_layout

\begin_layout Paragraph
reject_on_cache_error(boolean)
\end_layout

\begin_layout Standard
pretend that resource check is sucessful on checking internal errors
\end_layout

\begin_layout Standard

\series bold
default
\series default
: 0
\end_layout

\begin_layout Section
Core
\end_layout

\begin_layout Standard
YETI Core is essentially a module which is loaded with SBC module which
 is loaded with SEMS.
\end_layout

\begin_layout Subsection
Routing & Call params
\begin_inset CommandInset label
LatexCommand label
name "sub:Routing-&-Call"

\end_inset


\end_layout

\begin_layout Standard
The central notion of calls processing is CallProfile.
 This is a structure that defines the parameters and behaviors for each
 call.
\end_layout

\begin_layout Standard
For the full list of possible parameters please refer to the documentation
 of SEMS SBC and source code of SEMS SBC,YETI SBC.
\end_layout

\begin_layout Standard
Specific for YETI SBC CallProfile parameters:
\end_layout

\begin_layout Description
disconnect_code_id
\begin_inset space ~
\end_inset

(integer) used instead of 
\series bold
refuse_with 
\series default
parameter.
 means internal disconnect code which is described in database and resolved
 by Translations [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Translations"

\end_inset

] class
\end_layout

\begin_layout Description
cache_time
\begin_inset space ~
\end_inset

(integer) determines whether to cache the database response and his TTL
 
\begin_inset CommandInset label
LatexCommand label
name "cache_time_param"

\end_inset

[
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ProfilesCache"

\end_inset

]
\end_layout

\begin_layout Description
time_limit
\begin_inset space ~
\end_inset

(integer) determines maximum call duration
\end_layout

\begin_layout Description
resources
\begin_inset space ~
\end_inset

(string) resources list for call.
 [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Resources"

\end_inset

]
\end_layout

\begin_layout Standard
Also we changed all string constants (eg.
 FilterType, RefreshMethod) to appropriate id values.
 This values partly described in database and partly hardcoded.
\end_layout

\begin_layout Standard
Actions which being performed on initial-INVITE:
\end_layout

\begin_layout Itemize
retreive appropriate set of CallProfiles ( from ProfliesCache [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ProfilesCache"

\end_inset

] or from database [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:getprofile"

\end_inset

] )
\end_layout

\begin_layout Itemize
check resources availability and try to grab them (if resources are busy
 iterate over available CallProfiles till reached profile with available
 resources)
\end_layout

\begin_layout Itemize
try to establish connection with terminator (perform rerouting in case when
 we have non-succ response and it stop_hunting [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Translations"

\end_inset

] flag equal to false in early-state dialog.
 write CDR for each rerouting attempt)
\end_layout

\begin_layout Standard
All the dirty work about routing process is performed by database stored
 procedures.
 We plan create middleware software which will be responsible for routing.
\end_layout

\begin_layout Subsection
Resources
\begin_inset CommandInset label
LatexCommand label
name "sub:Resources"

\end_inset


\end_layout

\begin_layout Standard
Resource is abstract concept.
 It is something that is required to make a call (eg.
 channels, simultaneous calls, etc)
\end_layout

\begin_layout Standard
Each resource has following properties:
\end_layout

\begin_layout Description
id unique id within type space
\end_layout

\begin_layout Description
type values which determines behavior when resource is busy (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_resource_types"

\end_inset

)
\end_layout

\begin_layout Description
takes amount of abstract units needed for one call
\end_layout

\begin_layout Description
limit upper value limit for resource
\end_layout

\begin_layout Standard
We use 
\begin_inset CommandInset href
LatexCommand href
name "Redis"
target "http://redis.io/"

\end_inset

 DSS as storage for current resources state.
 One Redis server can be shared between many YETI SBC instances thus we
 can provide for example control of the max number of calls of the logical
 client even if he has the calls over different nodes.
\end_layout

\begin_layout Standard
To ensure the effective use of Redis replication we are working with two
 separated logical Redis servers (it may be one physical server).
 One of them is used only for read-only queries ( checking of resources
 availability ) other server is used for resources grabbing and releasing.
 Of course, if this is separate servers, between them must be configured
 replication.
\end_layout

\begin_layout Standard
Each resource has it own key on DSS.
 Currently this is combination of id and type separated with symbol ':'.
 You can check the status of resources with your own utilites or software
 directly on Redis server.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Each returned from database CallProfile has 
\series bold
resources 
\series default
string field.
 It's formatted list of resources needed for this call.
\end_layout

\begin_layout Standard
Resources string has following format:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

r1_type:r1_id:r1_limit:r1_takes;r2_type:r2_id:r2_limit:r2_takes[;...]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ie: ';' is separator for resources and ':' is separator for fields within
 one resource
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
For details about checking, grabbing and releasing implementation refer
 to source code.
\end_layout

\begin_layout Subsection
Translations
\begin_inset CommandInset label
LatexCommand label
name "sub:Translations"

\end_inset


\end_layout

\begin_layout Standard
Translations class serves the following purposes:
\end_layout

\begin_layout Itemize
Decide whether continue rerouting on certain response code [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_rerouting"

\end_inset

]
\end_layout

\begin_layout Itemize
Resolve internal codes into corresponding combinations of code and reason
 [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_refuse"

\end_inset

]
\end_layout

\begin_layout Itemize
Rewrite terminator response codes [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_rewrite"

\end_inset

]
\end_layout

\begin_layout Subsection
Registrations
\begin_inset CommandInset label
LatexCommand label
name "sub:Registrations"

\end_inset


\end_layout

\begin_layout Standard
Sometimes we need to be able to perform SIP registration on foreign servers.
\end_layout

\begin_layout Standard
YETI SBC Registrations class uses SEMS 
\series bold
registrar_client 
\series default
module functionality.
 It simply obtains list of required registrations from database [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_registrations_out"

\end_inset

], transmits them to the registrar_client for handling and periodically
 checks their state.
\end_layout

\begin_layout Subsection
ProfilesCache
\begin_inset CommandInset label
LatexCommand label
name "sub:ProfilesCache"

\end_inset


\end_layout

\begin_layout Standard
Implemented to improve performance and to reduce the load on database.
\end_layout

\begin_layout Standard
Just memorises responses for getprofile [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:getprofile"

\end_inset

] query from database into hash
\end_layout

\begin_layout Standard
Can be fully disabled from local configuration file.
 When enabled can be controlled with database [
\begin_inset CommandInset ref
LatexCommand ref
reference "cache_time_param"

\end_inset

]
\end_layout

\begin_layout Subsection
CDRs
\begin_inset CommandInset label
LatexCommand label
name "sub:CDRs"

\end_inset


\end_layout

\begin_layout Standard
CDRs is the key for billing.
 To ensure reliability SEMS SBC supports failover with slave CDR database
 and (in worst cases) CSV files.
\end_layout

\begin_layout Standard
You can upload CDRs from CSV file into desired database using script yeti-csv2sq
l which is provided with core package.
\end_layout

\begin_layout Standard
CDRs are written asyncronously by multiple threads, each of which has its
 own connection to the primary and (on enabled failover) to the slave database.
\end_layout

\begin_layout Standard
For details about CDRs fields, refer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:cdrwrite"

\end_inset


\end_layout

\begin_layout Subsection
XmlRPC interface
\begin_inset CommandInset label
LatexCommand label
name "sub:XmlRPC-interface"

\end_inset


\end_layout

\begin_layout Standard
YETI module has its own xmlrpc interface which allows to control and monitor
 it.
 All responses formatted in JSON.
\end_layout

\begin_layout Subsubsection
showVersion
\end_layout

\begin_layout Description
build git commit hash of current binary
\end_layout

\begin_layout Description
compiled_at build date
\end_layout

\begin_layout Description
compiled_by build user
\end_layout

\begin_layout Subsubsection
getConfig
\end_layout

\begin_layout Standard
Shows current settings
\end_layout

\begin_layout Description
calls_show_limit
\begin_inset space ~
\end_inset

(integer) upper limit for getCalls [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:getCalls"

\end_inset

] request
\end_layout

\begin_layout Description
node_id
\begin_inset space ~
\end_inset

(integer) current node id [
\begin_inset CommandInset ref
LatexCommand ref
reference "par:node_id-(integer,id)"

\end_inset

]
\end_layout

\begin_layout Description
pop_id
\begin_inset space ~
\end_inset

(integer) curent pop id [
\begin_inset CommandInset ref
LatexCommand ref
reference "par:pop_id-(integer,id)"

\end_inset

]
\end_layout

\begin_layout Description
resources_control
\begin_inset space ~
\end_inset

(node)
\end_layout

\begin_deeper
\begin_layout Description
cache
\begin_inset space ~
\end_inset

(node) redis cache parameters
\end_layout

\begin_deeper
\begin_layout Description
read_pool
\begin_inset space ~
\end_inset

(node) readonly Redis server parameters
\end_layout

\begin_deeper
\begin_layout Description
pool_size
\begin_inset space ~
\end_inset

(integer) number of simultaneous connections
\end_layout

\begin_layout Description
server
\begin_inset space ~
\end_inset

(string) server connect string
\end_layout

\end_deeper
\begin_layout Description
write_pool
\begin_inset space ~
\end_inset

(node) master Redis server parameters
\end_layout

\begin_deeper
\begin_layout Description
pool_size
\begin_inset space ~
\end_inset

(integer) number of simultaneous connections
\end_layout

\begin_layout Description
server
\begin_inset space ~
\end_inset

(string) server connect string
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
db_config
\begin_inset space ~
\end_inset

(string) database
\end_layout

\begin_layout Description
db_schema
\begin_inset space ~
\end_inset

(string) database schema
\end_layout

\end_deeper
\begin_layout Description
router
\begin_inset space ~
\end_inset

(node) routing engine parameters
\end_layout

\begin_layout Description
cache_buckets
\begin_inset space ~
\end_inset

(integer) ProfilesCache [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ProfilesCache"

\end_inset

] buckets
\end_layout

\begin_layout Description
cache_check_interval
\begin_inset space ~
\end_inset

(double) ProfilesCache [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ProfilesCache"

\end_inset

] grabage collector check interval
\end_layout

\begin_layout Description
cache_enabled
\begin_inset space ~
\end_inset

(boolean) ProfilesCache [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ProfilesCache"

\end_inset

] enabled
\end_layout

\begin_layout Description
config_db
\begin_inset space ~
\end_inset

(string) database connection string which used to obtain configuration
\end_layout

\begin_layout Description
dyn_fields
\begin_inset space ~
\end_inset

(string
\begin_inset space ~
\end_inset

list) current dynamic fields [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_interface_out"

\end_inset

] list
\end_layout

\begin_layout Description
failover_to_slave
\begin_inset space ~
\end_inset

(boolean) use slave database for failover on getprofile
\end_layout

\begin_layout Description
getprofile_call
\begin_inset space ~
\end_inset

(string) sql query used in getprofile procedure
\end_layout

\begin_layout Description
sipreq_header_fields
\begin_inset space ~
\end_inset

(string
\begin_inset space ~
\end_inset

list) considered in getprofile SIP headers list [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_interface_in"

\end_inset

]
\end_layout

\begin_layout Description
writecdr_call
\begin_inset space ~
\end_inset

(string) sql query used in writecdr procedure
\end_layout

\begin_layout Description
master_pool
\begin_inset space ~
\end_inset

(node) master database pool parameters
\end_layout

\begin_deeper
\begin_layout Description
check_interval
\begin_inset space ~
\end_inset

(integer) connection status checks interval
\end_layout

\begin_layout Description
db
\begin_inset space ~
\end_inset

(string) used database connection string
\end_layout

\begin_layout Description
max_exceptions
\begin_inset space ~
\end_inset

(integer) max non-fatal exceptions count before consider connection as bad
\end_layout

\begin_layout Description
max_wait
\begin_inset space ~
\end_inset

(integer) timeout for connection obtaining from connections pool
\end_layout

\begin_layout Description
size
\begin_inset space ~
\end_inset

(integer) pool size
\end_layout

\end_deeper
\begin_layout Description
slave_pool
\begin_inset space ~
\end_inset

(node) slave database pool parameters
\end_layout

\begin_deeper
\begin_layout Description
check_interval
\begin_inset space ~
\end_inset

(integer) connection status checks interval
\end_layout

\begin_layout Description
db
\begin_inset space ~
\end_inset

(string) used database connection string
\end_layout

\begin_layout Description
max_exceptions
\begin_inset space ~
\end_inset

(integer) max non-fatal exceptions count before consider connection as bad
\end_layout

\begin_layout Description
max_wait
\begin_inset space ~
\end_inset

(integer) timeout for connection obtaining from connections pool
\end_layout

\begin_layout Description
size
\begin_inset space ~
\end_inset

(integer) pool size
\end_layout

\end_deeper
\begin_layout Description
cdrwriter
\begin_inset space ~
\end_inset

(node) cdrwriter parameters
\end_layout

\begin_deeper
\begin_layout Description
failover_to_file
\begin_inset space ~
\end_inset

(boolean) failover to file enabled
\end_layout

\begin_layout Description
failover_file_completed_dir
\begin_inset space ~
\end_inset

(string) directory for completed CSV files
\end_layout

\begin_layout Description
failover_file_dir
\begin_inset space ~
\end_inset

(string) directory for temporary CSV files
\end_layout

\begin_layout Description
failover_to_slave
\begin_inset space ~
\end_inset

(boolean) failover to slave database enabled
\end_layout

\begin_layout Description
master_db
\begin_inset space ~
\end_inset

(string) master database connection string
\end_layout

\begin_layout Description
slave_db
\begin_inset space ~
\end_inset

(string) master database connection string
\end_layout

\begin_layout Description
query_args
\begin_inset space ~
\end_inset

(string
\begin_inset space ~
\end_inset

list) getprofile query function arguments list (very useful for debug purposes)
\end_layout

\end_deeper
\begin_layout Description
translator
\begin_inset space ~
\end_inset

(node) CodesTranslation [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Translations"

\end_inset

] parameters
\end_layout

\begin_deeper
\begin_layout Description
config_db
\begin_inset space ~
\end_inset

(string) used database connection string
\end_layout

\begin_layout Description
db_schema
\begin_inset space ~
\end_inset

(string) used database schema
\end_layout

\begin_layout Description
hunting
\begin_inset space ~
\end_inset

(node
\begin_inset space ~
\end_inset

list) contain pairs of (node with name equal to code, parameters related
 to this code)
\end_layout

\begin_deeper
\begin_layout Description
is_stop_hunting
\begin_inset space ~
\end_inset

(boolean) continue hunting [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_rerouting"

\end_inset

]
\end_layout

\end_deeper
\begin_layout Description
internal_translations
\begin_inset space ~
\end_inset

(node
\begin_inset space ~
\end_inset

list) contain pairs of (node with name equal to code, parameters related
 to this code)
\end_layout

\begin_deeper
\begin_layout Description
internal
\begin_inset space ~
\end_inset

code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

internal_reason
\begin_inset space ~
\end_inset

(string),
\begin_inset space ~
\end_inset

response_code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

response_reason
\begin_inset space ~
\end_inset

(string) [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_refuse"

\end_inset

]
\end_layout

\end_deeper
\begin_layout Description
response_translations
\begin_inset space ~
\end_inset

(node
\begin_inset space ~
\end_inset

list) contain pairs of (node with name equal to code, parameters related
 to this code)
\end_layout

\begin_deeper
\begin_layout Description
pass_reason_to_originator
\begin_inset space ~
\end_inset

(boolean),
\begin_inset space ~
\end_inset

rewrite_code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

rewrite_reason
\begin_inset space ~
\end_inset

(string) [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_disconnect_code_rewrite"

\end_inset

]
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
getStats
\begin_inset CommandInset label
LatexCommand label
name "sub:getStats"

\end_inset


\end_layout

\begin_layout Standard
Shows runtime stats
\end_layout

\begin_layout Description
active_routers_count
\begin_inset space ~
\end_inset

(integer) router instances count
\end_layout

\begin_layout Description
calls_show_limit
\begin_inset space ~
\end_inset

(integer) upper limit for getCalls [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:getCalls"

\end_inset

] request
\end_layout

\begin_layout Description
localtime
\begin_inset space ~
\end_inset

(integer) YETI SBC node localtime timestamp
\end_layout

\begin_layout Description
uptime
\begin_inset space ~
\end_inset

(double) uptime of node in seconds
\end_layout

\begin_layout Description
AmSession
\begin_inset space ~
\end_inset

(node) AmSession stats
\end_layout

\begin_deeper
\begin_layout Description
AvgCPS
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

MaxCPS
\begin_inset space ~
\end_inset

(integer) calls per second counters
\end_layout

\begin_layout Description
AvgSessionNum
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

MaxSessionNum
\begin_inset space ~
\end_inset

(integer)
\begin_inset space ~
\end_inset

SessionNum
\begin_inset space ~
\end_inset

(integer) sessions counters (keep in mind that the number of calls equal
 half of the sessions count)
\end_layout

\end_deeper
\begin_layout Description
AmSessionContainer
\begin_inset space ~
\end_inset

(node) AmSessionContainer stats
\end_layout

\begin_deeper
\begin_layout Description
dead_sessions_count
\begin_inset space ~
\end_inset

(integer) sessions which are await for cleanup
\end_layout

\begin_layout Description
unclean_shutdown_enabled
\begin_inset space ~
\end_inset

(boolean) determines whether send shutdown event for each session on SEMS
 shutdown
\end_layout

\end_deeper
\begin_layout Description
routers
\begin_inset space ~
\end_inset

(node
\begin_inset space ~
\end_inset

list) always contain one 
\series bold
'active'
\series default
 node (router instance which will be used for all new calls) and optionally
 set of 
\series bold
'old' 
\series default
nodes (obsolete router instances which still referenced by uncompleted calls).
 all of this nodes has similar parameters within.
\end_layout

\begin_deeper
\begin_layout Description
uptime
\begin_inset space ~
\end_inset

(double) uptime in second of this router instance
\end_layout

\begin_layout Description
refs
\begin_inset space ~
\end_inset

(integer) how many legs refer to this router instance
\end_layout

\begin_layout Description
hits
\begin_inset space ~
\end_inset

(integer) overall initial INVITE requests count
\end_layout

\begin_layout Description
cache_hits
\begin_inset space ~
\end_inset

(integer) ProfilesCache matched requests count
\end_layout

\begin_layout Description
db_hits
\begin_inset space ~
\end_inset

(integer) queries to database count
\end_layout

\begin_layout Description
gps_avg
\begin_inset space ~
\end_inset

(double),
\begin_inset space ~
\end_inset

gps_max
\begin_inset space ~
\end_inset

(double) queries per second (close to calls per second)
\end_layout

\begin_layout Description
gt_max
\begin_inset space ~
\end_inset

(double),
\begin_inset space ~
\end_inset

gt
\begin_inset space ~
\end_inset

min
\begin_inset space ~
\end_inset

(double) how long takes one CallProflies set obtaining (both from database
 and cache)
\end_layout

\begin_layout Description
cdr_writer
\begin_inset space ~
\end_inset

(node) CdrWriter stats
\end_layout

\begin_deeper
\begin_layout Description
name
\begin_inset space ~
\end_inset

(string) class instance name
\end_layout

\begin_layout Description
poolsize
\begin_inset space ~
\end_inset

(integer) database connection pool size
\end_layout

\begin_layout Description
threads
\begin_inset space ~
\end_inset

(array
\begin_inset space ~
\end_inset

list) list of arrays each of which mean one thread with it own stats
\end_layout

\begin_deeper
\begin_layout Description
db_exceptions
\begin_inset space ~
\end_inset

(integer) database exceptions count
\end_layout

\begin_layout Description
queue_len
\begin_inset space ~
\end_inset

(integer) how many CDRs currently in queue of this thread (if it grows something
 must be changed.
 most likely, database doesn't have time to handle requests)
\end_layout

\begin_layout Description
queue_run
\begin_inset space ~
\end_inset

(boolean) queue processing flag
\end_layout

\begin_layout Description
stopped
\begin_inset space ~
\end_inset

(boolean) thread scheduled to stop
\end_layout

\begin_layout Description
tried_cdrs
\begin_inset space ~
\end_inset

(integer) how many CDRs was passed to this thread
\end_layout

\begin_layout Description
writed_cdrs
\begin_inset space ~
\end_inset

(integer) how many CDRs was successfully written (must be equal or near
 of 
\series bold
tried_cdrs)
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
master_pool
\begin_inset space ~
\end_inset

(node),
\begin_inset space ~
\end_inset

slave_pool
\begin_inset space ~
\end_inset

(node) database connection pools stats
\end_layout

\begin_deeper
\begin_layout Description
check_transactions
\begin_inset space ~
\end_inset

(integer) number of connections checks
\end_layout

\begin_layout Description
transactions
\begin_inset space ~
\end_inset

(integer) number of completed transactions
\end_layout

\begin_layout Description
failed_connections
\begin_inset space ~
\end_inset

(integer) number of failed connections
\end_layout

\begin_layout Description
total_connections
\begin_inset space ~
\end_inset

(integer) how many connections in pool
\end_layout

\begin_layout Description
tps_avg
\begin_inset space ~
\end_inset

(double),
\begin_inset space ~
\end_inset

tps_max
\begin_inset space ~
\end_inset

(double) transactions per second for entire pool
\end_layout

\begin_layout Description
tt_max
\begin_inset space ~
\end_inset

(double),
\begin_inset space ~
\end_inset

tt_min
\begin_inset space ~
\end_inset

(double) transaction time
\end_layout

\begin_layout Description
connections
\begin_inset space ~
\end_inset

(array
\begin_inset space ~
\end_inset

list) contain per connection stats
\end_layout

\begin_deeper
\begin_layout Description
exceptions
\begin_inset space ~
\end_inset

(integer) number of exceptions in this database connection
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
proflies_cache
\begin_inset space ~
\end_inset

(node) ProfilesCache stats
\end_layout

\begin_deeper
\begin_layout Description
entries
\begin_inset space ~
\end_inset

(integer) current entries number in cache
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
resource_control
\begin_inset space ~
\end_inset

(node) resource control stats
\end_layout

\begin_deeper
\begin_layout Description
hits
\begin_inset space ~
\end_inset

(integer) overall checks number
\end_layout

\begin_layout Description
errors
\begin_inset space ~
\end_inset

(integer) errors number
\end_layout

\begin_layout Description
nextroute
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

overloaded
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

rejected
\begin_inset space ~
\end_inset

(integer) number of responses for each type
\end_layout

\end_deeper
\begin_layout Description
translator
\begin_inset space ~
\end_inset

(node) CodesTranslator stats
\end_layout

\begin_deeper
\begin_layout Description
missed_response_configs
\begin_inset space ~
\end_inset

(integer) count of unconfigured reactions for rerouting
\end_layout

\begin_layout Description
unknown
\begin_inset space ~
\end_inset

code_resolves
\begin_inset space ~
\end_inset

(integer) count of unresolved responses translations
\end_layout

\begin_layout Description
unknown_internal_codes
\begin_inset space ~
\end_inset

(integer) count of unresolved internal codes translations
\end_layout

\end_deeper
\begin_layout Subsubsection
clearStats
\end_layout

\begin_layout Standard
Clears runtime statistics
\end_layout

\begin_layout Subsubsection
clearCache
\end_layout

\begin_layout Standard
Clears ProfliesCache immediatly
\end_layout

\begin_layout Subsubsection
dropCall
\end_layout

\begin_layout Standard
Allows to drop certain active call using him local_tag (of course, mandatory
 argument is local_tag)
\end_layout

\begin_layout Subsubsection
getCall
\begin_inset CommandInset label
LatexCommand label
name "sub:getCall"

\end_inset


\end_layout

\begin_layout Standard
Get information about active call by local_tag (local_tag is mandatory argument)
\end_layout

\begin_layout Standard
Returning values in common equal to CDR fields [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:cdrwrite"

\end_inset

] except of:
\end_layout

\begin_layout Description
local_time
\begin_inset space ~
\end_inset

(double) YETI SBC localtime timestamp (the fractional part is responsible
 for a milliseconds)
\end_layout

\begin_layout Subsubsection
getCalls
\begin_inset CommandInset label
LatexCommand label
name "sub:getCalls"

\end_inset


\end_layout

\begin_layout Standard
Returns set of active calls (count of entries is limited [
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:calls_show_limit-(integer)"

\end_inset

])
\end_layout

\begin_layout Standard
Each element of array equal to one getCall [
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getCall"

\end_inset

] response
\end_layout

\begin_layout Subsubsection
getCallsCount
\end_layout

\begin_layout Standard
Returns count of active calls
\end_layout

\begin_layout Subsubsection
getRegistrations
\end_layout

\begin_layout Standard
Returns list of configured registrations
\end_layout

\begin_layout Standard
For fields meaning refer to 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Registrations"

\end_inset


\end_layout

\begin_layout Subsubsection
reload
\end_layout

\begin_layout Standard
Without any parameters shows all available reload actions:
\end_layout

\begin_layout Description
resources reload action for [
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Resources"

\end_inset

].
 reload resources configs (no reconnect to Redis servers)
\end_layout

\begin_layout Description
translations reload action [
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Translations"

\end_inset

].
 reload entire translations configuration from database
\end_layout

\begin_layout Description
registrations reload action for [
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Registrations"

\end_inset

].
 remove current registrations from registart_client and load new list from
 database.
\end_layout

\begin_layout Description
router intented for zero downtime database configuration upgrade.
 creates new router instance and configure it to work with new database
 or/and database scheme.
 Old router instances will continue processing of already established calls
 and will be gracefully turned off when this calls completed.
 (count of references to old router can be obtained with 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getStats"

\end_inset

)
\end_layout

\begin_layout Subsubsection
closeCdrFiles
\end_layout

\begin_layout Standard
Close opened CSV files immediatly
\end_layout

\begin_layout Section
Database
\end_layout

\begin_layout Subsection
mandatory interface functions
\end_layout

\begin_layout Subsubsection
load_interface_out
\begin_inset CommandInset label
LatexCommand label
name "sub:load_interface_out"

\end_inset


\end_layout

\begin_layout Standard
We have posibility to pass directly arbitrary custom parameters specific
 to calls from routing database into CDR.
 They will be obtained from 
\series bold

\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getprofile"

\end_inset


\series default
 query response and passed at the end of parameters list of 
\series bold

\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:cdrwrite"

\end_inset


\series default
 query in the order of they appearance in 
\series bold

\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:load_interface_out"

\end_inset


\series default
 response.
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.load_interface_out()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
varname
\begin_inset space ~
\end_inset

(varchar) custom variable name
\end_layout

\begin_layout Description
vartype
\begin_inset space ~
\end_inset

(varchar) custom vaiable type (see 
\begin_inset CommandInset href
LatexCommand href
name "PostgreSQL datatypes"
target "http://www.postgresql.org/docs/devel/static/datatype.html"

\end_inset

)
\end_layout

\begin_layout Description
forcdr
\begin_inset space ~
\end_inset

(boolean) determines should we use this field or not (only fields with forcdr=tr
ue will be processed)
\end_layout

\begin_layout Subsubsection
load_interface_in
\begin_inset CommandInset label
LatexCommand label
name "sub:load_interface_in"

\end_inset


\end_layout

\begin_layout Standard
There are tasks when we need to take into account for routing and billing
 some of the SIP headers from INVITE request.
 For this purpose we have list of custom SIP request headers which will
 be passed to the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getprofile"

\end_inset

 function after static parameters in the order of they appearance in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:load_interface_in"

\end_inset

 response.
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.load_interface_in()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
varname
\begin_inset space ~
\end_inset

(varchar) custom variable name
\end_layout

\begin_layout Description
vartype
\begin_inset space ~
\end_inset

(varchar) custom vaiable type (see 
\begin_inset CommandInset href
LatexCommand href
name "PostgreSQL datatypes"
target "http://www.postgresql.org/docs/devel/static/datatype.html"

\end_inset

)
\end_layout

\begin_layout Subsubsection
getprofile
\begin_inset CommandInset label
LatexCommand label
name "sub:getprofile"

\end_inset


\end_layout

\begin_layout Standard
Function that is responsible, in fact, for routing.
 It takes static parameters (which are described below) and dynamic after
 them (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:load_interface_in"

\end_inset

).
\end_layout

\begin_layout Standard
Function returns set of callprofiles [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Routing-&-Call"

\end_inset

] (one callprofile on the row)
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.getprofile_f(i_node_id integer, i_pop_id integer, i_remote_i
p inet, i_remote_port integer, i_local_ip inet, i_local_port integer, i_from_dsp
 character varying, i_from_name character varying, i_from_domain character
 varying, i_from_port integer, i_to_name character varying, i_to_domain
 character varying, i_to_port integer, i_contact_name character varying,
 i_contact_domain character varying, i_contact_port integer, i_user character
 varying, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
request parameters:
\end_layout

\begin_layout Description
i_node_id
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

i_pop_id
\begin_inset space ~
\end_inset

(integer) see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:node_id-(integer,id)"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:pop_id-(integer,id)"

\end_inset

,
\end_layout

\begin_layout Description
i_remote_ip
\begin_inset space ~
\end_inset

(inet),
\begin_inset space ~
\end_inset

i_remote_port
\begin_inset space ~
\end_inset

(integer) originator ip:port
\end_layout

\begin_layout Description
i_local_ip
\begin_inset space ~
\end_inset

(inet),
\begin_inset space ~
\end_inset

i_local_port
\begin_inset space ~
\end_inset

(integer) switch ip:port
\end_layout

\begin_layout Description
i_from_dsp
\begin_inset space ~
\end_inset

(varchar) display name (
\begin_inset CommandInset href
LatexCommand href
name "rfc3261 8.1.1.3"
target "http://www.ietf.org/rfc/rfc3261.txt"

\end_inset

)
\end_layout

\begin_layout Description
i_from_name
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_from_domain
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_from_port
\begin_inset space ~
\end_inset

(integer) parsed From field parts
\end_layout

\begin_layout Description
i_to_name
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_to_domain
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_to_port
\begin_inset space ~
\end_inset

(integer) parsed To field parts
\end_layout

\begin_layout Description
i_contact_name
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_contact_domain
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_contact_port
\begin_inset space ~
\end_inset

(integer) parsed Contact field parts
\end_layout

\begin_layout Description
i_user
\begin_inset space ~
\end_inset

(varchar) user part of RURI field
\end_layout

\begin_layout Standard
\align center
response:
\end_layout

\begin_layout Standard
set of CallProfiles [
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Routing-&-Call"

\end_inset

]
\end_layout

\begin_layout Subsubsection
cdrwrite
\begin_inset CommandInset label
LatexCommand label
name "sub:cdrwrite"

\end_inset


\end_layout

\begin_layout Standard
Is called in order to write final CDR.
 As well as for 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:getprofile"

\end_inset

 has static input parameters and customizable after them (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:load_interface_out"

\end_inset

)
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.writecdr(i_node_id integer, i_pop_id integer, i_routing_atte
mpt integer, i_is_last_cdr boolean, i_time_limit integer, i_lega_local_ip
 character varying, i_lega_local_port integer, i_lega_remote_ip character
 varying, i_lega_remote_port integer, i_legb_local_ip character varying,
 i_legb_local_port integer, i_legb_remote_ip character varying, i_legb_remote_po
rt integer, i_time_start bigint, i_time_connect bigint, i_time_end bigint,
 i_disconnect_code integer, i_disconnect_reason character varying, i_disconnect_
initiator integer, i_lega_disconnect_code integer, i_lega_disconnect_reason
 character varying, i_orig_call_id character varying, i_term_call_id character
 varying, i_local_tag character varying, i_msg_logger_path character varying,
 i_log_rtp boolean, i_log_sip boolean, i_lega_rx_payloads character varying,
 i_lega_tx_payloads character varying, i_legb_rx_payloads character varying,
 i_legb_tx_payloads character varying, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
request parameters:
\end_layout

\begin_layout Description
i_node_id
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

i_pop_id
\begin_inset space ~
\end_inset

(integer) see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:node_id-(integer,id)"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:pop_id-(integer,id)"

\end_inset

,
\end_layout

\begin_layout Description
i_routing_attempt
\begin_inset space ~
\end_inset

(integer) determines the routing attempt number of this CDR within call
\end_layout

\begin_layout Description
i_is_last_cdr
\begin_inset space ~
\end_inset

(boolean) added when it was implemented the rerouting (serial-fork) feature.
 We write separate CDR for each rerouting attempt, therefore a good idea
 to know whether it is the last attempt for this call.
 Means final call result if flag equal to true
\end_layout

\begin_layout Description
i_time_limit
\begin_inset space ~
\end_inset

(integer) call duration limit in seconds
\end_layout

\begin_layout Description
i_lega_local_ip
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_lega_local_port
\begin_inset space ~
\end_inset

(integer) local ip:port which were used to communicate with originator
\end_layout

\begin_layout Description
i_lega_remote_ip(varchar),
\begin_inset space ~
\end_inset

i_lega_remote_port
\begin_inset space ~
\end_inset

(integer) originator ip:port
\end_layout

\begin_layout Description
i_legb_local_ip(varchar),
\begin_inset space ~
\end_inset

i_legb_local_port
\begin_inset space ~
\end_inset

(integer) local ip:port which were used to communicate with terminator
\end_layout

\begin_layout Description
i_legb_remote_ip
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_legb_remote_port
\begin_inset space ~
\end_inset

(integer) terminator ip:port
\end_layout

\begin_layout Description
i_time_start
\begin_inset space ~
\end_inset

(bigint) initial INVITE request timestamp of arrival.
 (real call duration is
\series bold
 time_end-time_connect)
\end_layout

\begin_layout Description
i_time_connect
\begin_inset space ~
\end_inset

(bigint) connect time timestamp
\end_layout

\begin_layout Description
i_time_end
\begin_inset space ~
\end_inset

(bigint) termination time timestamp
\end_layout

\begin_layout Description
i_disconnect_code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

i_disconnect_reason
\begin_inset space ~
\end_inset

(varchar) depending on 
\series bold
disconnect_initiator 
\series default
means original (non rewrited) terminator code/response or internal code/response
\end_layout

\begin_layout Description
i_disconnect_initiator
\begin_inset space ~
\end_inset

(integer) disconnect initiator id.
 current possible values:
\end_layout

\begin_deeper
\begin_layout Description
0
\begin_inset space ~
\end_inset

(by
\begin_inset space ~
\end_inset

database) database returned particular type of exception or refused the
 request due to some reasons
\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

(by
\begin_inset space ~
\end_inset

traffic
\begin_inset space ~
\end_inset

switch) internal switch error, mailformed request, resources validation
 failed, etc
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

(by
\begin_inset space ~
\end_inset

destination) terminator request/response was the cause of call termination
\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

(by
\begin_inset space ~
\end_inset

originator) originator request/response was the cause of call termination
\end_layout

\end_deeper
\begin_layout Description
i_lega_disconnect_code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

i_lega_disconnect_reason
\begin_inset space ~
\end_inset

(varhchar) code and reason which was passed to originator
\end_layout

\begin_layout Description
i_orig_call_id
\begin_inset space ~
\end_inset

(varchar) originator callid
\end_layout

\begin_layout Description
i_term_call_id
\begin_inset space ~
\end_inset

(varchar) terminator callid
\end_layout

\begin_layout Description
i_local_tag
\begin_inset space ~
\end_inset

(varchar) internal call local_tag
\end_layout

\begin_layout Description
i_msg_logger_path(varchar) path to pcap file with call dump
\end_layout

\begin_layout Description
i_log_rtp
\begin_inset space ~
\end_inset

(boolean),
\begin_inset space ~
\end_inset

i_log_sip
\begin_inset space ~
\end_inset

(boolean) logging parameters was used for pcap file
\end_layout

\begin_layout Description
i_lega_rx_payloads
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_lega_tx_payloads
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_legb_rx_payloads
\begin_inset space ~
\end_inset

(varchar),
\begin_inset space ~
\end_inset

i_legb_tx_payloads
\begin_inset space ~
\end_inset

(varchar) each variable contains comma-separated list of codecs which was
 used during call (we collect this directly from each RTP packet payload
 type)
\end_layout

\begin_layout Subsubsection
load_disconnect_code_rerouting
\begin_inset CommandInset label
LatexCommand label
name "sub:load_disconnect_code_rerouting"

\end_inset


\end_layout

\begin_layout Standard
Determines YETI SBC reaction for different terminator response codes.
 
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * from switch.load_disconnect_code_rerouting()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
received_code
\begin_inset space ~
\end_inset

(integer) terminator response code
\end_layout

\begin_layout Description
stop_rerouting
\begin_inset space ~
\end_inset

(boolean) stop rerouting if true
\end_layout

\begin_layout Subsubsection
load_disconnect_code_rewrite
\begin_inset CommandInset label
LatexCommand label
name "sub:load_disconnect_code_rewrite"

\end_inset


\end_layout

\begin_layout Standard
We able to rewrite terminator and switch response codes before they will
 be sent to the originator.
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.load_disconnect_code_rewrite()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
o_code
\begin_inset space ~
\end_inset

(integer) response code
\end_layout

\begin_layout Description
o_reason
\begin_inset space ~
\end_inset

(varchar) response code description (not used in processing)
\end_layout

\begin_layout Description
o_pass_reason_to_originator
\begin_inset space ~
\end_inset

(boolean) pass the original response reason to originator
\end_layout

\begin_layout Description
o_rewrited_code
\begin_inset space ~
\end_inset

(integer) code which will be passed to originator (be careful, you risk
 to break the correct SIP sequence here)
\end_layout

\begin_layout Description
o_rewrited_reason
\begin_inset space ~
\end_inset

(varchar) reason which will pe passed to originator.
 if empty, then will be transferred original response reason
\end_layout

\begin_layout Subsubsection
load_disconnect_code_refuse
\begin_inset CommandInset label
LatexCommand label
name "sub:load_disconnect_code_refuse"

\end_inset


\end_layout

\begin_layout Standard
Responsible for resolving of internal error codes into response code and
 response reason separately for CDR and response to originator .
 
\end_layout

\begin_layout Standard
Currently we have such hardcoded internal error codes:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

#define FC_PARSE_FROM_FAILED		114
\end_layout

\begin_layout Plain Layout

#define FC_PARSE_TO_FAILED		115
\end_layout

\begin_layout Plain Layout

#define FC_PARSE_CONTACT_FAILED		116
\end_layout

\begin_layout Plain Layout

#define FC_NOT_PREPARED			117
\end_layout

\begin_layout Plain Layout

#define FC_DB_EMPTY_RESPONSE		118 
\end_layout

\begin_layout Plain Layout

#define FC_READ_FROM_TUPLE_FAILED	119 
\end_layout

\begin_layout Plain Layout

#define FC_EVALUATION_FAILED		120 
\end_layout

\begin_layout Plain Layout

#define FC_GET_ACTIVE_CONNECTION	121 
\end_layout

\begin_layout Plain Layout

#define FC_DB_BROKEN_EXCEPTION		122 
\end_layout

\begin_layout Plain Layout

#define FC_DB_CONVERSION_EXCEPTION	123 
\end_layout

\begin_layout Plain Layout

#define FC_DB_BASE_EXCEPTION		124 
\end_layout

\begin_layout Plain Layout

#define DC_RTP_TIMEOUT			125
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM  switch.load_disconnect_code_refuse()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
o_id
\begin_inset space ~
\end_inset

(integer) internal code
\end_layout

\begin_layout Description
o_code
\begin_inset space ~
\end_inset

(integer) code which will be written into CDR
\end_layout

\begin_layout Description
o_reason
\begin_inset space ~
\end_inset

(varchar) reason which will be written into CDR
\end_layout

\begin_layout Description
o_rewrited_code
\begin_inset space ~
\end_inset

(integer) code which will be passed to originator.
 (use 
\series bold
o_code
\series default
 if empty)
\end_layout

\begin_layout Description
o_rewrited_reason
\begin_inset space ~
\end_inset

(varchar) reason which will be passed to originator.
 (use 
\series bold
o_reason
\series default
 if empty)
\end_layout

\begin_layout Subsubsection
load_registrations_out
\begin_inset CommandInset label
LatexCommand label
name "sub:load_registrations_out"

\end_inset


\end_layout

\begin_layout Standard
Provide desired registrations list
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.load_registrations_out(IN i_pop_id integer, IN i_node_id
 integer)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
request parameters:
\end_layout

\begin_layout Description
i_node_id
\begin_inset space ~
\end_inset

(integer) see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:node_id-(integer,id)"

\end_inset


\end_layout

\begin_layout Description
i_pop_id
\begin_inset space ~
\end_inset

(integer) see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "par:pop_id-(integer,id)"

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
o_id
\begin_inset space ~
\end_inset

(integer) internal id
\end_layout

\begin_layout Description
o_domain
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_user
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_display_name
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_auth_user
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_passwd
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_proxy
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Description
o_contact
\begin_inset space ~
\end_inset

(varchar)
\end_layout

\begin_layout Standard
To understand fields meanings is useful to know about SEMS registrar client.
 Anyway existing web-interface allows set it intuitively.
\end_layout

\begin_layout Subsubsection
load_resource_types
\begin_inset CommandInset label
LatexCommand label
name "sub:load_resource_types"

\end_inset


\end_layout

\begin_layout Standard
Provide for each Resource (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Resources"

\end_inset

) type
\end_layout

\begin_layout Standard
\align center
query:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT * FROM switch.load_resource_types()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
response fields:
\end_layout

\begin_layout Description
name
\begin_inset space ~
\end_inset

(string) resource name (used for clarity in reports)
\end_layout

\begin_layout Description
reject_code
\begin_inset space ~
\end_inset

(integer),
\begin_inset space ~
\end_inset

reject_reason
\begin_inset space ~
\end_inset

(string) code will be passed to originator
\end_layout

\begin_layout Description
action_id behavior on resource overload.
 possible values:
\end_layout

\begin_deeper
\begin_layout Description
1
\begin_inset space ~
\end_inset

(reject) reject call with specified code and reason
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

(next
\begin_inset space ~
\end_inset

route) choose next CallProfile (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Routing-&-Call"

\end_inset

) ( equal to reject if there are no routes more)
\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

(accept) just ignore overload of resource.
 pretend that all right.
\end_layout

\end_deeper
\begin_layout Subsection
event-based changes propagation
\end_layout

\begin_layout Standard
There was a problem automatically applying the necessary changes for the
 YETI SBC nodes after the configuration changes in the database without
 node restart.
\end_layout

\begin_layout Standard
To solve it we implemented set of xmlrpc commands which force to reload
 configuration for each subsystem of node.
 Then we use simple table in database for events of changes which need to
 be processed.
\end_layout

\begin_layout Standard
There is small script written on Python [yeti-process-events] which loads
 events from that table and sends appropriate xmlrpc commands to the desired
 nodes.
\end_layout

\begin_layout Standard
Script gets list of nodes and database connection settings from local configurat
ion file.
\end_layout

\begin_layout Standard
When it starts, it receives events from the event table:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

SELECT id, command, retries FROM switch.events FOR UPDATE NOWAIT
\end_layout

\end_inset


\end_layout

\begin_layout Standard
for each event after successfull xmlrpc request we do something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

DELETE FROM switch.events WHERE id={event_id}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and otherwise:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline false
status open

\begin_layout Plain Layout

UPDATE switch.events SET retries = retries+1 WHERE id={event_id}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to take advantage of this decision it would be a good idea to
 add this script into any external scheduler like cron
\end_layout

\begin_layout Section
Web
\end_layout

\begin_layout Standard
Web interface written using Active Admin technology.
 The basic objects of interface is tables and records.
 In common case each table has at least several actions as creation, removal,
 review of records.
 There are two basic modes: a table and specific record view.
\end_layout

\begin_layout Subsection
What you see on the screen
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/wysons.png
	width 100text%

\end_inset


\end_layout

\begin_layout Enumerate
Navigation panel
\end_layout

\begin_layout Enumerate
Current record control panel
\end_layout

\begin_deeper
\begin_layout Itemize
New,Edit,Delete - speaks for itself
\end_layout

\begin_layout Itemize
History - changes history of current record.
 You can see the previous versions of the record and infomation about who
 is editing them
\end_layout

\begin_layout Itemize
Copy - create new record using data from current record
\end_layout

\begin_layout Itemize
Disable - toggle 'Enable' flag
\end_layout

\end_deeper
\begin_layout Enumerate
Inromation about current record
\end_layout

\begin_layout Enumerate
Detailed information about current record
\end_layout

\begin_layout Enumerate
Comments.
 Each record can have own comments except of some read-only data (eg.
 CDR or Active Calls)
\end_layout

\begin_layout Subsection
Quick start
\begin_inset CommandInset label
LatexCommand label
name "sub:Web-Quick-start"

\end_inset


\end_layout

\begin_layout Standard
step by step quick configuration
\end_layout

\begin_layout Subsubsection
Main->Contractors
\end_layout

\begin_layout Standard
add one customer and one vendor
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_main_contractors.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Billing->Accounts
\end_layout

\begin_layout Standard
add account for each contractor
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_billing_accounts.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Gateways
\end_layout

\begin_layout Standard
add origination and termination gateways
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_gateways.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Routing groups
\end_layout

\begin_layout Standard
add routegroup
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_routing_groups.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Rateplans
\end_layout

\begin_layout Standard
add rateplan
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_rateplans.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Customer auth
\end_layout

\begin_layout Standard
add authorization record (customer auth)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_customers_auth.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Destinations
\end_layout

\begin_layout Standard
add destinations.
 Destinations must belong to previously created routegroup
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_destinations.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsubsection
Routing->Dialpeers
\end_layout

\begin_layout Standard
add dialpeers
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename src/qs_routing_dialpeers.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsection
Standart procedures
\end_layout

\begin_layout Subsubsection
Main
\end_layout

\begin_layout Paragraph
Admin Users
\end_layout

\begin_layout Standard
You can configure authentification of users which will control your system.
\end_layout

\begin_layout Standard
Currently there are two privilege levels: Admin and Superadmin.
 The only difference is Superadmin may also add new users into the system.
\end_layout

\begin_layout Standard
User admin@example.com is the SuperAdmin initially.
\end_layout

\begin_layout Standard
In current implementation there is no ability to remove users, but you can
 block desired user.
\end_layout

\begin_layout Description
id unique id.
 generated automatically
\end_layout

\begin_layout Description
email email used as login
\end_layout

\begin_layout Description
encrypted
\begin_inset space ~
\end_inset

password user password hash
\end_layout

\begin_layout Description
sign
\begin_inset space ~
\end_inset

in
\begin_inset space ~
\end_inset

count successful login count
\end_layout

\begin_layout Description
current
\begin_inset space ~
\end_inset

sign
\begin_inset space ~
\end_inset

in
\begin_inset space ~
\end_inset

IP current user IP if it logged in
\end_layout

\begin_layout Description
last
\begin_inset space ~
\end_inset

sign
\begin_inset space ~
\end_inset

in
\begin_inset space ~
\end_inset

IP IP of last login
\end_layout

\begin_layout Description
created
\begin_inset space ~
\end_inset

at user creation date
\end_layout

\begin_layout Description
updated
\begin_inset space ~
\end_inset

at update user date
\end_layout

\begin_layout Description
enabled toggle access to the web-interface for this user
\end_layout

\begin_layout Paragraph
Contractors
\end_layout

\begin_layout Standard
Contractor is partner to which there is any interaction.
 System must have at least two contractor.
 One with the flag customer = true, the other with a vendor = true.
\end_layout

\begin_layout Description
id unique id.
 generated automatically
\end_layout

\begin_layout Description
name contractor name
\end_layout

\begin_layout Description
enabled state
\end_layout

\begin_layout Description
vendor contractor is provider can be used for the calls termination
\end_layout

\begin_layout Description
customer contractor is client and we are awaiting calls from him
\end_layout

\begin_layout Standard

\color red
The same contractor can be both vendor and customer at the same time
\end_layout

\begin_layout Paragraph
Audit
\end_layout

\begin_layout Subsubsection
Routing
\end_layout

\begin_layout Paragraph
Customers Auths
\end_layout

\begin_layout Description
Name Unique name of authorization rule
\end_layout

\begin_layout Description
Enabled If false then rule will be ignored in the process of authorization
\end_layout

\begin_layout Description
Customer Contractor who will pay for this call
\end_layout

\begin_layout Description
Rateplay Rateplan, according to which will be searched destination
\end_layout

\begin_layout Description
Routing
\begin_inset space ~
\end_inset

Group Routing group, according to which will be searched routes for call
 termination
\end_layout

\begin_layout Description
Gateway Incoming gateway.
 Parameters of this gateway will determine commutation system behaviour
 on legA
\end_layout

\begin_layout Description
Account Account, which belongs to previously selected contractor.
 Funds for call will be debited from this account
\end_layout

\begin_layout Description
Src
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

rule,
\begin_inset space ~
\end_inset

Src
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

result translation rules for source number of incoming call
\begin_inset Newline newline
\end_inset


\color blue
TODO: add link to regexp translations mechanism explanation 
\end_layout

\begin_layout Description
Dst
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

rule,
\begin_inset space ~
\end_inset

Dst
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

result translation rules for destination number of incoming call
\begin_inset Newline newline
\end_inset


\color blue
TODO: add link to regexp translations mechanism explanation 
\end_layout

\begin_layout Description
Dump
\begin_inset space ~
\end_inset

level Logging level for calls.
 (Attention: recording may significally increase load on system and quickly
 fill the hard drive.
 One should use it only as temporary tool for diagnosing of protocol problems)
\end_layout

\begin_deeper
\begin_layout Description
Capture
\begin_inset space ~
\end_inset

all
\begin_inset space ~
\end_inset

traffic record sip signalling and media streams
\end_layout

\begin_layout Description
Capture
\begin_inset space ~
\end_inset

nothing record disabled
\end_layout

\begin_layout Description
Capture
\begin_inset space ~
\end_inset

rtp
\begin_inset space ~
\end_inset

traffic record media streams only
\end_layout

\begin_layout Description
Capture
\begin_inset space ~
\end_inset

signalling
\begin_inset space ~
\end_inset

traffic record sip signalling only
\end_layout

\end_deeper
\begin_layout Description
Ip Addresses of originator.
 There is possible format x.x.x.x/z, where x.x.x.x - network address, z - netmask
 length
\end_layout

\begin_layout Description
Pop Point of presence for which this rule is valid.
 If not choosen rule valid anywhere.
\end_layout

\begin_layout Description
Src
\begin_inset space ~
\end_inset

prefix Source number prefix of incoming call.
 If filled, rule will be triggered only for calls which source number begins
 from this prefix 
\end_layout

\begin_layout Description
Dst
\begin_inset space ~
\end_inset

prefix Destination number prefix of incoming call.
 If filled, rule will be triggered only for calls which destination number
 begins from this prefix 
\end_layout

\begin_layout Description
Uri
\begin_inset space ~
\end_inset

domain Domain part of request URI of incoming call.
 If empty any domain considered as valid
\end_layout

\begin_layout Description
X-Yeti-Auth Value of header field X-Yeti-Auth in INVITE request of incoming
 call.
 If filled, rule will be triggered only for calls which contains appropriate
 header field value in INVITE request
\end_layout

\begin_layout Standard

\color blue
TODO: explain auth select algo on incoming call
\end_layout

\begin_layout Paragraph
Destinations
\end_layout

\begin_layout Description
Status If equal to false, this entry will be ignored
\end_layout

\begin_layout Description
Prefix Destination number prefix.
 Used in search for the most appropriate destination using longest prefix
 match algorithm
\end_layout

\begin_layout Description
Rateplan Each destination belongs to rateplan.
 Destinations search always performed within certain rateplan
\end_layout

\begin_layout Description
Reject
\begin_inset space ~
\end_inset

calls If true, all calls to this destination will be rejected
\end_layout

\begin_layout Description
Rate
\begin_inset space ~
\end_inset

Policy method of determining of the price for the destination for consumer
\end_layout

\begin_deeper
\begin_layout Description
Fixed Fixed price.
 Price will be determined by parameters Initial Rate, Next Rate, Connect
 Fee
\end_layout

\begin_layout Description
Based
\begin_inset space ~
\end_inset

on
\begin_inset space ~
\end_inset

used
\begin_inset space ~
\end_inset

dialpeer Parameter Next Rate will be determined as:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $NextRate=Dp\, next\, rate*(1+Dp\, margin\, percent)+Dp\, margin\, fixed$
\end_inset

,
\begin_inset Newline newline
\end_inset

where 
\begin_inset Quotes eld
\end_inset

Dp next rate
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

Next rate
\begin_inset Quotes erd
\end_inset

 parameter from used dialpeer
\end_layout

\begin_layout Description
Min(Fixed,Based
\begin_inset space ~
\end_inset

on
\begin_inset space ~
\end_inset

used
\begin_inset space ~
\end_inset

dialpeer) Will be choosen minimal Next Rate from two first cases
\end_layout

\begin_layout Description
Max(Fixed,Based
\begin_inset space ~
\end_inset

on
\begin_inset space ~
\end_inset

used
\begin_inset space ~
\end_inset

dialpeer) Will be choosen maximal Next Rate from two first cases
\end_layout

\end_deeper
\begin_layout Description
Initial
\begin_inset space ~
\end_inset

Interval First billing interval length
\end_layout

\begin_layout Description
Next
\begin_inset space ~
\end_inset

Interval Length of each billing interval following after first
\end_layout

\begin_layout Description
Use
\begin_inset space ~
\end_inset

dp
\begin_inset space ~
\end_inset

intervals If true then Initial Interval and Next Interval will be obtained
 from dialpeer instead of using own
\end_layout

\begin_layout Description
Initial
\begin_inset space ~
\end_inset

rate Price of one minute of conversation during first billing interval (In
 case when Rate Policy=Fixed)
\end_layout

\begin_layout Description
Next
\begin_inset space ~
\end_inset

rate Price of one minute of conversation during following (after first)
 billing intervals (In case when Rate Policy=Fixed)
\end_layout

\begin_layout Description
Connect
\begin_inset space ~
\end_inset

Fee Fee for the connection.
 On successfull connection establishment this value will be debited from
 customer account
\end_layout

\begin_layout Description
Dp
\begin_inset space ~
\end_inset

margin
\begin_inset space ~
\end_inset

fixed Fixed margin from dialpeer rates ( In case when Rate Policy=Fixed,Based
 on used dialpeer)
\end_layout

\begin_layout Description
Dp
\begin_inset space ~
\end_inset

margin
\begin_inset space ~
\end_inset

percent Relative margin from dialpeer rates ( In case when Rate Policy=Fixed,Bas
ed on used dialpeer)
\end_layout

\begin_layout Standard

\color blue
TODO: explain destination select algo on incoming call
\end_layout

\begin_layout Paragraph
Dialpeers
\end_layout

\begin_layout Description
Enabled if false entry will be always skipped during processing
\end_layout

\begin_layout Description
Prefix Destination number prefix.
 Used for search of appropriate route (longest prefix match algo)
\end_layout

\begin_layout Description
Priority Dialpeer priority.
 Determines position in set of dialpeers after sorting (highest priority
 value means highest position in set)
\end_layout

\begin_layout Description
Initial
\begin_inset space ~
\end_inset

interval First billing interval length ( supplier billing)
\end_layout

\begin_layout Description
Initial
\begin_inset space ~
\end_inset

rate Price of one minute of conversation during first billing interval (
 supplier billing)
\end_layout

\begin_layout Description
Next
\begin_inset space ~
\end_inset

interval Length of each billing interval following after first ( supplier
 billing)
\end_layout

\begin_layout Description
Next
\begin_inset space ~
\end_inset

rate Price of one minute of conversation during following (after first)
 billing intervals ( supplier billing)
\end_layout

\begin_layout Description
Lcr
\begin_inset space ~
\end_inset

rate
\begin_inset space ~
\end_inset

multiplier Next Rate multiplier which is used on dialpeers sorting
\end_layout

\begin_layout Description
Connect
\begin_inset space ~
\end_inset

fee Fee for the connection.
 On successfull connection establishment this value will be added to the
 supplier balance
\end_layout

\begin_layout Description
Vendor Name of vendor that owns this dialpeer
\end_layout

\begin_layout Description
Gateway Name of gateway which will be used as terminator for call
\end_layout

\begin_layout Description
Account Supplier acount.
 Call price will be added to this account
\end_layout

\begin_layout Description
Routing
\begin_inset space ~
\end_inset

group Routing group that owns this dialpeer
\end_layout

\begin_layout Description
Valid
\begin_inset space ~
\end_inset

from Begin of validity interval.
 dialpeer will be ignored if time of call less than this value
\end_layout

\begin_layout Description
Valid_till End of validity interval.
 dialpeer will be ignored if time of call greater than this value
\end_layout

\begin_layout Description
Capacity Route capacity.
 If capacity overloaded we skip this route and choose another appropriate
 route if exist
\end_layout

\begin_layout Description
Src
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

rule,
\begin_inset space ~
\end_inset

Src
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

result translation rules for source number after routing
\begin_inset Newline newline
\end_inset


\color blue
TODO: add link to regexp translations mechanism explanation 
\end_layout

\begin_layout Description
Dst
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

rule,
\begin_inset space ~
\end_inset

Dst
\begin_inset space ~
\end_inset

rewrite
\begin_inset space ~
\end_inset

result translation rules for destination number after routing
\begin_inset Newline newline
\end_inset


\color blue
TODO: add link to regexp translations mechanism explanation 
\end_layout

\begin_layout Description
Acd
\begin_inset space ~
\end_inset

limit Lower ACD limit for this dialpeer.
 Dialpeer will be blocked if this limit reached
\end_layout

\begin_layout Description
Asr
\begin_inset space ~
\end_inset

limit Lower ASR limit for this dialpeer.
 Dialpeer will be blocked if this limit reached
\end_layout

\begin_layout Paragraph
Rateplans
\end_layout

\begin_layout Description
Name unique rate plan name
\end_layout

\begin_layout Paragraph
Routing Groups
\end_layout

\begin_layout Paragraph
Gateways
\end_layout

\begin_layout Paragraph
Registrations
\end_layout

\begin_layout Subsubsection
CDR
\end_layout

\begin_layout Paragraph
Cdr Tables
\end_layout

\begin_layout Paragraph
CDR History
\end_layout

\begin_layout Subsubsection
Billing
\end_layout

\begin_layout Paragraph
Accounts
\end_layout

\begin_layout Description
Name Unique account name
\end_layout

\begin_layout Description
Contractor Contractor which owns account.
 Each contractor may have any number of accounts.
 Billing is done independently for each account.
\end_layout

\begin_layout Description
Min
\begin_inset space ~
\end_inset

balance Minimal value of account balance.
 When this value is reached the incoming calls for this account will not
 be served (if the contractor acts as consumer)
\end_layout

\begin_layout Description
Max
\begin_inset space ~
\end_inset

balance Minimal value of account balance.
 When this value is reached, dialpeers associated with this account will
 be excluded from the process of calls routing.
 (if the contractor acts as provider)
\end_layout

\begin_layout Description
Origination
\begin_inset space ~
\end_inset

capacity The maximum number of concurrent incoming calls that can be authorized
 for this account (if the contractor acts as consumer) 
\end_layout

\begin_layout Description
Termination
\begin_inset space ~
\end_inset

capacity The maximum number of concurrent outgoing calls that can be routed
 to dial peers belonging to this account (if the contractor acts as provider)
\end_layout

\begin_layout Paragraph
Payments
\end_layout

\begin_layout Description
Account Account name which belongs to payment
\end_layout

\begin_layout Description
Amount Payment amount.
 Can be both positive or negative.
\end_layout

\begin_layout Description
Notes Comments to payment
\end_layout

\begin_layout Paragraph
Invoices
\end_layout

\begin_layout Subsubsection
RT Data
\end_layout

\begin_layout Paragraph
Acive Calls
\end_layout

\begin_layout Paragraph
Switch Stats
\end_layout

\begin_layout Subsubsection
System
\end_layout

\begin_layout Paragraph
Background Tasks
\end_layout

\begin_layout Paragraph
Disconnect codes
\end_layout

\begin_layout Paragraph
Logic Logs
\end_layout

\begin_layout Paragraph
Debug Call
\end_layout

\begin_layout Paragraph
Nodes
\end_layout

\begin_layout Paragraph
Gui Configs
\end_layout

\begin_layout Paragraph
RS Replication
\end_layout

\begin_layout Paragraph
Events
\end_layout

\begin_layout Section
Roadmap
\end_layout

\end_body
\end_document
